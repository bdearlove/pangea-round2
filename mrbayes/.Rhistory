list(c(Lambda = unname(dL)))
}
oL <- ode(y = c(Lambda = 0), times2, func = dLambda, parms, method = integrationMethod, ox=ox, bdt=bdt)
ox
names(ox)
dimnames(ox)
x0
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
x0
x0=c(S=39999,I=1)
ox <- ode(y = x0, times, func = dx, parms, method = integrationMethod, bdt=bdt)
ox
dimnames(ox)
oL <- ode(y = c(Lambda = 0), times2, func = dLambda, parms, method = integrationMethod, ox=ox, bdt=bdt)
ox
xnames <- dimnames(ox)[[2]][c(2,dim(ox)[2]-1)]
xnames
dimnames(ox)
dimnames(ox)[[2]]
xinterp <- function(h,ox,bdt) {
xinterps <- lapply(2:ncol(ox), function(k) approxfun(rule = 2, bdt$maxSampleTime - ox[, 1], ox[, k]))
xnames <- dimnames(ox)[[2]][c(2,dim(ox)[2])]
x <- sapply(1:length(xnames), function(k) xinterps[[k]](h))
names(x) <- xnames
x
}
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
source('~/Dropbox/pangeaabc/myfun7.R')
ll1
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
source('~/Dropbox/pangeaabc/myfun8.R')
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll1
ll8
sort(unique(bdt$maxSampleTime - bdt$heights))
?ode
source('~/Dropbox/pangeaabc/myfun8.R')
source('~/Dropbox/pangeaabc/myfun8.R')
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "ode45", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "ode45", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll1
ll8
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "ode23", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "lsoda", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll8
ll1
source('~/Dropbox/pangeaabc/myfun8.R')
source('~/Dropbox/pangeaabc/myfun8.R')
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll8
ll1
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 1000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll8
ll1
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 10000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll8
ll1
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
devtools::install_github("jjallaire/revealjs")
start <- c(367.7,342.1,346.7,385.3,338.8,349,377.4,340.1,321.5,386.6,371.8,307.4)
end <- c(369.4,342.8,346.3,383.5,339,349.9,376.2,339.2,319.7,385.2,370.0,305.4)
t.test(end-start)
wilcox.test(end-start,correct=FALSE)
setwd("~/Dropbox/phylogeog/analyses/onset")
ll <- read.csv("h7n9.csv",header=TRUE)
head(ll)
View(ll)
library(lubridate)
ll <- read.csv("h7n9.csv",header=TRUE)
parse_date(ll$date_of_onset)
parse_date_time(ll$date_of_onset)
ll$date_of_onset
parse_date_time(ll$date_of_onset,"dd-uuu-yyyy")
parse_date_time(ll$date_of_onset,"dd-mmm-yyyy")
mdy.date
mdy_date
install.packages("parsedate")
parse_date(ll$date_of_onset)
library(parsedate)
parse_date(ll$date_of_onset)
parse_date(as.character(ll$date_of_onset))
ll_nona <- ll[!is.na(ll$date_of_onset),]
onset <- parse_date(as.character(ll_nona$date_of_onset))
shanghai <- onset[ll_nona$province=="Shanghai"]
shanghai
ll <- read.csv("h7n9.csv",header=TRUE)
ll_nona <- ll[!is.na(ll$date_of_onset),]
onset <- parse_date(as.character(ll_nona$date_of_onset))
shanghai <- onset[ll_nona$province=="Shanghai"]
shanghai
dim(ll)
dim(ll_nona)
is.na(ll$date_of_onset)
ll$date_of_onset
ll_nona <- ll[ll$date_of_onset!="",]
onset <- parse_date(as.character(ll_nona$date_of_onset))
shanghai <- onset[ll_nona$province=="Shanghai"]
ll$province
table(ll$province)
shanghai <- onset[ll_nona$province=="Shanghai"]
jiangsu <- onset[ll_nona$province=="Jiangsu"]
zhejiang <- onset[ll_nona$province=="Zhejiang"]
shanghai-min(shanghai)
shanghai-min(shanghai)/60*60*24
(shanghai-min(shanghai))/60*60*24
(shanghai-min(shanghai))
days(shanghai-min(shanghai))
shanghai
int(shanghai)
as.integer(shanghai)
unclass(shanghai-min(shanghai))/86400
unclass(shanghai)/86400
shanghai <- unclass(shanghai)/86400
shanghai <- shanghai-min(shanghai)
shanghai
shanghai <- unclass(shanghai)/86400
shanghai <- shanghai-min(shanghai)
jiangsu <- unclass(jiangsu)/86400
jiangsu <- jiangsu-min(jiangsu)
zhejiang <- unclass(zhejiang)/86400
zhejian <- zhejiang-min(zhejiang)
zhejiang <- zhejiang-min(zhejiang)
shanghai
shanghai <- factor(shanghai,levels=seq(0,max(shanghai)))
shanghai
shanghai <- onset[ll_nona$province=="Shanghai"]
shanghai <- unclass(shanghai)/86400
shanghai <- shanghai-min(shanghai)
max(shanghai)
factor(shanghai,levels=seq(0,max(shanghai)))
shanghai <- factor(shanghai,levels=seq(0,max(shanghai)))
shanghai
table(shanghai)
shanghai <- as.data.frame.table(table(shanghai))
shanghai
names(shanghai) <- c(t,N)
names(shanghai) <- c("t","N"")
)
"
names(shanghai) <- c("t","N")
shanghai
library(ggtree)
library(ggplot2)
library(ape)
pw57 <- read.tree("PW57_edit.cot.tre")
setwd("~/Dropbox/bcell/submitted/evaluation_datasets/cot")
pw57 <- read.tree("PW57_edit.cot.tre")
pw57
plot(pw57)
pw57 <- read.tree("PW57_edit.cot.tre")
pw106 <- read.tree("PW106_edit.cot.tre")
n152 <- read.tree("N152.cot.tre")
pw57.ggt <- ggtree(pw57)
pw57.ggt
pw57.ggt <- ggtree(pw57)+theme_tree2()
pw57.ggt
pw106.ggt <- ggtree(pw106)+theme_tree2()
m152.ggt <- ggtree(n152)+theme_tree2()
pw106
pw106.ggt
n152.ggt
n152.ggt
n152.ggt <- ggtree(n152)+theme_tree2()
n152.ggt <- ggtree(n152)+theme_tree2()
n152.ggt
pw57.ggt <- ggtree(pw57)+theme_tree2()+ggtitle("57 sequence dataset")
pw57.ggt
pw57.ggt <- ggtree(pw57)+theme_tree2()+ggtitle("57 sequence dataset")
pw106.ggt <- ggtree(pw106)+theme_tree2()+ggtitle("106 sequence dataset")
n152.ggt <- ggtree(n152)+theme_tree2()+ggtitle("N152 dataset")
pw57.ggt <- ggtree(pw57)+theme_tree2()+ggtitle("(a) 57 sequence dataset")
pw106.ggt <- ggtree(pw106)+theme_tree2()+ggtitle("(b) 106 sequence dataset")
n152.ggt <- ggtree(n152)+theme_tree2()+ggtitle("(c) N152 dataset")
par(mfrow=c(1,3))
pw57.ggt
pw106.ggt
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
trees <- multiplot(pw57.ggt,pw106.ggt,n152.ggt)
pw57.ggt <- ggtree(pw57)+theme_tree2()+ggtitle("(a) 57 sequence dataset")+scale_x_continuous(breaks=seq(0,0.3,by=0.05))
pw106.ggt <- ggtree(pw106)+theme_tree2()+ggtitle("(b) 106 sequence dataset")+scale_x_continuous(breaks=seq(0,0.3,by=0.05))
n152.ggt <- ggtree(n152)+theme_tree2()+ggtitle("(c) N152 dataset")+scale_x_continuous(breaks=seq(0,0.3,by=0.05))
trees <- multiplot(pw57.ggt,pw106.ggt,n152.ggt)
trees <- multiplot(pw57.ggt,pw106.ggt,n152.ggt,cols=3)
pdf("clonaltrees.pdf",width=9,height=4)
trees <- multiplot(pw57.ggt,pw106.ggt,n152.ggt,cols=3)
dev.off()
pdf("clonaltrees.pdf",width=9,height=5)
trees <- multiplot(pw57.ggt,pw106.ggt,n152.ggt,cols=3)
dev.off()
cophenetic(pw57)
pw57.dist <- cophenetic(pw57)
mean(pw57.dist[lower.tri(pw57.dist)])
pw57.dist <- cophenetic(pw57)
mean(pw57.dist[lower.tri(pw57.dist)])
pw106.dist <- cophenetic(pw106)
mean(pw106.dist[lower.tri(pw106.dist)])
n152.dist <- cophenetic(n152)
mean(n152.dist[lower.tri(n152.dist)])
cherries(pw57)
devtools::install_git("http://github.com/bdearlove/treeImbalance.git")
library(treeImbalance)
Ncherries(pw57)
17./55
snt(pw57)
library(apTreeshape)
sackin.test(pw57)
?sackin.tes
?sackin.test
?treeshape
as.treeshape(pw57)
sackin.test(as.treeshape(pw57))
sackin.test(as.treeshape(pw106))
sackin.test(as.treeshape(n152))
sackin.test(as.treeshape(n152),alternative="less")
sackin.test(as.treeshape(n152),alternative="more")
sackin.test(as.treeshape(n152),alternative="greater")
sackin.test(as.treeshape(pw57),alternative="greater")
sackin.test(as.treeshape(pw57),alternative="less")
sackin.test(as.treeshape(pw57),alternative="less",model="yule")
sackin.test(as.treeshape(pw57),alternative="greater",model="yule")
sackin.test(as.treeshape(pw57),alternative="greater",model="pda")
sackin.test(as.treeshape(pw57),alternative="less",model="pda")
setwd("~/Dropbox/beagle/swig_r")
dyn.load("beagle_wrap.so")
source("beagle.R")
mars <- "CCGAG-AGCAGCAATGGAT-GAGGCATGGCG"
saturn  <- "GCGCGCAGCTGCTGTAGATGGAGGCATGACG"
jupiter <- "GCGCGCAGCAGCTGTGGATGGAAGGATGACG"
nPatterns <- len(mars)
nPatterns <- nchar(mars)
returnInfo <- BeagleInstanceDetails()
instance <- beagleCreateInstance(
3,  	# Number of tip data elements (input)
2,	        # Number of partials buffers to create (input) -- internal node count
3,		# Number of compact state representation buffers to create -- for use with setTipStates (input)
4,		# Number of states in the continuous-time Markov chain (input) -- DNA
nPatterns,	# Number of site patterns to be handled by the instance (input) -- not compressed in this case
1,		# Number of eigen-decomposition buffers to allocate (input)
4,		# Number of transition matrix buffers (input) -- one per edge
1,		#  Number of rate categories
0,		# Number of scaling buffers -- can be zero if scaling is not needed
NULL,	 # List of potential resource on which this instance is allowed (input, NULL implies no restriction
0,		# Length of resourceList list (input) -- not needed to use the default hardware config
0,		# Bit-flags indicating preferred implementation charactertistics, see BeagleFlags (input)
0,		# Bit-flags indicating required implementation characteristics, see BeagleFlags (input)
returnInfo
)
createStates
result=new_intArray(3)
intArray
new_intArray
x=new_intArray(10)
source("beagle.R")
x=new_intArray(10)
l <- list()
l["A"] <- 0
l
l["A"]
l[["A"]]
l[["A"]] <- 0
l
tab
mars
mars[3]
?nchar
substr(mars,3,3)
getTable <- function(){
l <- list()
l["A"] <- 0
l["C"] <- 1
l["T"] <- 2
l["G"] <- 3
l["a"] <- 0
l["c"] <- 1
l["t"] <- 2
l["g"] <- 3
l["-"] <- 4
l
}
createStates <- function(st,tab){
states <- new_intArray(nchar(st))
for(i in 1:nchar(st)){
# Note zero-based indexing
intArray_setitem(states,i-1,tab[[substr(st,i,i)]])
}
return(states)
}
tab <- getTable()
marsStates <- createStates(mars,tab)
tab[[substr(st,1,1)]]
st=mars
tab[[substr(st,1,1)]]
states <- new_intArray(nchar(st))
states
i=1
intArray_setitem(states,i-1,tab[[substr(st,i,i)]])
intArray_setitem(states,i,tab[[substr(st,i,i)]])
intArray_setitem(states,0,tab[[substr(st,i,i)]])
intArray_setitem(states,0,1)
states
as.integer(states)
source("beagle.R")
createStates <- function(st,tab){
states <- new_intArray(nchar(st))
for(i in 1:nchar(st)){
# Note zero-based indexing
intArray_setitem(states,i-1,tab[[substr(st,i,i)]])
}
return(states)
}
marsStates <- createStates(mars,tab)
states
setwd("~/Projects/pangea-round2/mrbayes")
library(ape)
library(magrittr)
seqdata.fn <- list.files(path="../sequences",pattern=".fas$",full.names=TRUE)
numsc <- length(seqdata.fn)
seqdata <- list()
for(i in 1:numsc){
seqdata[[i]] <- read.dna(seqdata.fn[i],format="fasta",as.matrix=FALSE) # NB as.matrix=FALSE required for NEXUS output as below
}
stubs <- rep("",numsc)
for(i in 1:numsc){
stubs[i] <- seqdata.fn[i] %>% strsplit(.,"/") %>% unlist %>% tail(.,1) %>% strsplit(.,".",fixed=TRUE) %>% unlist %>% head(.,1)
}
for(i in 1:8){
s <- seqdata[[i]]
ids <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,head,1) %>% unlist %>% as.character
#ids <- gsub("IDPOP_","",ids,fixed=TRUE)
#ids <- paste("X",ids,sep="")
st <- names(s) %>% strsplit(.,"_|\\|") %>% lapply(.,tail,1) %>% unlist %>% as.double
mf <- names(s) %>% grepl("\\-MALE|\\M\\|",.)
d <- data.frame(id=names(s),newid=ids,sampletime=st,male=mf)
write.table(d,paste(stubs[i],"_annotations.txt",sep=""),col.names=TRUE,row.names=FALSE,quote=FALSE,sep="\t")
}
for(i in 1:8){
s <- seqdata[[i]]
ids <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,head,1) %>% unlist %>% as.character
#ids <- gsub("IDPOP_","",ids,fixed=TRUE)
#ids <- paste("X",ids,sep="")
names(s) <- ids
write.nexus.data(as.character(s),paste(stubs[i],".nex",sep=""),format="dna",interleaved=FALSE)
}
for(i in 9:numsc){
s <- seqdata[[i]]
id1 <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,head,1) %>% unlist %>% as.character
id2 <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,"[",2) %>% unlist %>% as.character
ids <- paste(id1,id2,sep="_")
st <- names(s) %>% strsplit(.,"_|\\|") %>% lapply(.,tail,1) %>% unlist %>% as.double
mf <- names(s) %>% grepl("\\-MALE|\\M\\|",.)
d <- data.frame(id=names(s),newid=ids,sampletime=st,male=mf)
write.table(d,paste(stubs[i],"_annotations.txt",sep=""),col.names=TRUE,row.names=FALSE,quote=FALSE,sep="\t")
}
for(i in 9:numsc){
s <- seqdata[[i]]
id1 <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,head,1) %>% unlist %>% as.character
id2 <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,"[",2) %>% unlist %>% as.character
ids <- paste(id1,id2,sep="_")
names(s) <- ids
write.nexus.data(as.character(s),paste(stubs[i],".nex",sep=""),format="dna",interleaved=FALSE)
}
villages.partition <- "
charset gag = 1-1479;
charset pol = 1480-4479;
charset env = 4480-6987;
partition villages = 3: gag, pol, env;
set partition = villages;
"
regional.partition <- "
charset gag = 1-1440;
charset pol = 1441-4284;
charset env = 4285-6807;
partition regional = 3: gag, pol, env;
set partition = regional;
"
partition.vec <- rep("",numsc)
partition.vec[grep("Regional",seqdata.fn)] <- regional.partition
partition.vec[grep("Vill",seqdata.fn)] <- villages.partition
relaxedclock <- "
set autoclose=yes;
lset applyto=(all) nst=6 rates=invgamma ngammacat=4;
prset statefreqpr=Dirichlet(1.0,1.0,1.0,1.0);
unlink statefreq=(all) revmat=(all) shape=(all) pinvar=(all);
prset applyto=(all) ratepr=variable;
prset brlenspr=clock:uniform;
prset topologypr=uniform;
prset clockratepr=lognorm(-9.0,1.0);
prset clockvar=igr;
prset nodeagepr=calibrated;
"
clock.vec <- rep(relaxedclock,numsc)
calibrations.list <- list()
for(i in 1:8){
s <- seqdata[[i]]
ids <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,head,1) %>% unlist %>% as.character
tipdates <- names(s) %>% strsplit(.,"_|\\|") %>% lapply(.,tail,1) %>% unlist %>% as.double
tipage <- -(tipdates-max(tipdates))
numseqs <- length(s)
mbblock <- rep("",numseqs)
for(j in 1:numseqs){
tipname <- ids[j]
#mbblock[j] <- paste("calibrate ",tipname,"=Uniform(",tipage[j],",",tipage[j],");",sep="")
mbblock[j] <- paste("calibrate ",tipname,"=fixed(",tipage[j],");",sep="")
}
mbblock <- paste(mbblock,collapse="\n")
calibrations.list[[i]] <- mbblock
}
for(i in 9:numsc){
s <- seqdata[[i]]
id1 <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,head,1) %>% unlist %>% as.character
id2 <-  names(s) %>% strsplit(.,"\\-|\\|") %>% lapply(.,"[",2) %>% unlist %>% as.character
ids <- paste(id1,id2,sep="_")
tipdates <- names(s) %>% strsplit(.,"_|\\|") %>% lapply(.,tail,1) %>% unlist %>% as.double
tipage <- -(tipdates-max(tipdates))
numseqs <- length(s)
mbblock <- rep("",numseqs)
for(j in 1:numseqs){
tipname <- ids[j]
#mbblock[j] <- paste("calibrate ",tipname,"=Uniform(",tipage[j],",",tipage[j],");",sep="")
mbblock[j] <- paste("calibrate ",tipname,"=fixed(",tipage[j],");",sep="")
}
mbblock <- paste(mbblock,collapse="\n")
calibrations.list[[i]] <- mbblock
}
mcmcpars <- "
mcmc ngen=22000000 nruns=2 nchains=1 samplefreq=10000;
"
mcmc.vec <- rep(mcmcpars,numsc)
trees.fn <- list.files(path="../raxml",pattern="bestTree")
trees.fn <- c(rep("",8),trees.fn)
trees <- list()
for(i in 1:numsc){
trees[[i]] <- readLines(paste("../raxml/",trees.fn[i],sep=""))
}
for(i in 9:numsc){
tr <- trees[[i]]
tr <- read.tree(text=tr)
tr <- unroot(tr)
tl <- tr$tip.label
td <- tl %>% strsplit(.,"_",fixed=TRUE) %>% lapply(.,tail,1) %>% unlist %>% as.double
id1 <-  tl %>% strsplit(.,"\\-|\\|") %>% lapply(.,head,1) %>% unlist %>% as.character
id2 <-  tl %>% strsplit(.,"\\-|\\|") %>% lapply(.,"[",2) %>% unlist %>% as.character
ids <- paste(id1,id2,sep="_")
tr$tip.label <- ids
tr.rtt <- rtt(tr,td,objective="rsquared")
#dr <- distRoot(tr.rtt)
#idx <- match(tr.rtt$tip.label,ids)
#plot(dr~td[idx])
trees[[i]] <- write.tree(tr.rtt)
}
for(i in 1:numsc){
myseqs.nex <- paste(readLines(paste(stubs[i],".nex",sep="")),collapse="\n")
myseqs.nex <- gsub("DATATYPEDNA","DATATYPE=DNA",myseqs.nex,fixed=TRUE)
myseqs.mb <- sprintf("begin mrbayes;\n%s%s%s%send;\n",partition.vec[i],clock.vec[i],calibrations.list[[i]],mcmc.vec[i])
mytrees.nex <- sprintf("begin trees;\n tree tree_1=%s\nend;\n",trees[[i]])
cat(myseqs.nex,mytrees.nex,myseqs.mb,file=paste(stubs[i],"_mb_clock.nex",sep=""),sep="\n")
}
mcmcpars <- "
mcmc ngen=22000000 nruns=4 nchains=4 samplefreq=10000;
"
mcmc.vec <- rep(mcmcpars,numsc)
for(i in 1:numsc){
myseqs.nex <- paste(readLines(paste(stubs[i],".nex",sep="")),collapse="\n")
myseqs.nex <- gsub("DATATYPEDNA","DATATYPE=DNA",myseqs.nex,fixed=TRUE)
mytrees.nex <- sprintf("begin trees;\n tree tree_1=%s\nend;\n",trees[[i]])
myseqs.mb <- sprintf("begin mrbayes;\n%s%s%s%send;\n",partition.vec[i],clock.vec[i],calibrations.list[[i]],mcmc.vec[i])
cat(myseqs.nex,mytrees.nex,myseqs.mb,file=paste(stubs[i],"_mb_clock.nex",sep=""),sep="\n")
}
