times=tr.times,
t0=1,
covar=tr.covar,
tcovar="times",
covarnames=c('A'),
rprocess=discrete.time.sim(
step.fun=consttheta.sim,
delta.t=1),
dmeasure=consttheta.dens,
initializer=function(params, t0, ...)
{
theta <- params["theta"]
c(X = theta)
},
params=c(theta=0.5),
parameter.transform=function(params,...){
exp(params)
},
parameter.inv.transform=function(params,...){
log(params)
}
)
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = ( consttheta.mif.start() ),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
consttheta.dens <- function(y, x, t, params, log, covars, ...){
## the state at time t
X <- x#x["X"]
Y <- y#["Y"]
A <- covars["A"]
# note that y, the observed coalescence event not delta.t (which is an integer counting the number of coalescences)
# should explicitly calculate log
result <- unname(choose(A,2)*(1.0/X)*exp(-choose(A,2)*Y/X))
print(paste(X,Y,A,result))
if(log){
return(log(result))
}
else{
return(result)
}
}
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = ( consttheta.mif.start() ),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
consttheta.pomp <- pomp(data=c(Y=tr.ci),
times=tr.times,
t0=1,
covar=tr.covar,
tcovar="times",
covarnames=c('A'),
rprocess=discrete.time.sim(
step.fun=consttheta.sim,
delta.t=1),
dmeasure=consttheta.dens,
initializer=function(params, t0, ...)
{
theta <- params["theta"]
c(X = theta)
},
params=c(theta=0.5),
parameter.transform=function(params,...){
exp(params)
},
parameter.inv.transform=function(params,...){
log(params)
}
)
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = ( consttheta.mif.start() ),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
consttheta.mif.start <- function()
{
z <- runif(1,0.1,5)
c(theta=z,X=z)
}
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = ( consttheta.mif.start() ),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = consttheta.mif.start(),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
consttheta.sim <- function (x, t, params, delta.t, ...) {
## unpack the parameters:
theta <- params["theta"]
## covariates
## the state at time t
X <- x["X"]
## compute the state at time t+delta.t:
xnew <- c(X=unname(theta))
return(xnew)
}
consttheta.dens <- function(y, x, t, params, log, covars, ...){
## the state at time t
X <- x["X"]
Y <- y["Y"]
A <- covars["A"]
# note that y, the observed coalescence event not delta.t (which is an integer counting the number of coalescences)
# should explicitly calculate log
result <- unname(choose(A,2)*(1.0/X)*exp(-choose(A,2)*Y/X))
print(paste(X,Y,A,result))
if(log){
return(log(result))
}
else{
return(result)
}
}
consttheta.dens(y=c(Y=0.000152561986490496), x=c(X=4.54927386617688), t=1, params=c(theta=4.54927386617688), log=FALSE, covars=c(A=100))
consttheta.dens(y=c(Y=0.000152561986490496), x=c(X=4.54927386617688), t=1, params=c(theta=4.54927386617688), log=TRUE, covars=c(A=100))
consttheta.pomp <- pomp(data=c(Y=tr.ci),
times=tr.times,
t0=1,
covar=tr.covar,
tcovar="times",
covarnames=c('A'),
rprocess=discrete.time.sim(
step.fun=consttheta.sim,
delta.t=1),
dmeasure=consttheta.dens,
initializer=function(params, t0, ...)
{
theta <- params["theta"]
c(X = theta)
},
params=c(theta=0.5),
parameter.transform=function(params,...){
exp(params)
},
parameter.inv.transform=function(params,...){
log(params)
}
)
consttheta.mif.start <- function()
{
z <- runif(1,0.1,5)
c(theta=z,X=z)
}
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = consttheta.mif.start(),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
consttheta.pomp <- pomp(data=data.frame(Y=tr.ci,times=tr.times),
times="times",
t0=1,
covar=tr.covar,
tcovar="times",
covarnames=c('A'),
rprocess=discrete.time.sim(
step.fun=consttheta.sim,
delta.t=1),
dmeasure=consttheta.dens,
initializer=function(params, t0, ...)
{
theta <- params["theta"]
c(X = theta)
},
params=c(theta=0.5),
parameter.transform=function(params,...){
exp(params)
},
parameter.inv.transform=function(params,...){
log(params)
}
)
consttheta.mif.start <- function()
{
z <- runif(1,0.1,5)
c(theta=z,X.0=z)
}
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = consttheta.mif.start(),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = (consttheta.mif.start()),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
simulate(consttheta.pomp,params=c(theta=1))
simulate(consttheta.pomp,params=c(theta=1,X.0=1))
consttheta.pomp <- pomp(data=data.frame(Y=tr.ci,times=tr.times),
times="times",
t0=1,
covar=tr.covar,
tcovar="times",
covarnames=c('A'),
rprocess=discrete.time.sim(
step.fun=consttheta.sim,
delta.t=1),
dmeasure=consttheta.dens,
params=c(theta=0.5,X.0=0.5),
parameter.transform=function(params,...){
exp(params)
},
parameter.inv.transform=function(params,...){
log(params)
}
)
simulate(consttheta.pomp,params=c(theta=1,X.0=1))
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('theta'),
rw.sd = c(theta = .04),
start = consttheta.mif.start(),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
coef(consttheta.mif)
exp(coef(consttheta.mif))
names(consttheta.mif)
consttheta.mif
consttheta.sim <- function (x, t, params, delta.t, ...) {
## unpack the parameters:
# theta <- params["theta"]
## covariates
## the state at time t
## X <- x["X"]
## compute the state at time t+delta.t:
xnew <- c(X=unname(x["X"]))
return(xnew)
}
consttheta.dens <- function(y, x, t, params, log, covars, ...){
## the state at time t
X <- x["X"]
Y <- y["Y"]
A <- covars["A"]
# note that y, the observed coalescence event not delta.t (which is an integer counting the number of coalescences)
# should explicitly calculate log
result <- unname(choose(A,2)*(1.0/X)*exp(-choose(A,2)*Y/X))
# print(paste(X,Y,A,result))
if(log){
return(log(result))
}
else{
return(result)
}
}
consttheta.dens(y=c(Y=0.000152561986490496), x=c(X=4.54927386617688), t=1, params=c(theta=4.54927386617688), log=FALSE, covars=c(A=100))
consttheta.pomp <- pomp(data=data.frame(Y=tr.ci,times=tr.times),
times="times",
t0=1,
covar=tr.covar,
tcovar="times",
covarnames=c('A'),
rprocess=discrete.time.sim(
step.fun=consttheta.sim,
delta.t=1),
dmeasure=consttheta.dens,
params=c(X.0=0.5),
parameter.transform=function(params,...){
exp(params)
},
parameter.inv.transform=function(params,...){
log(params)
}
)
consttheta.mif.start <- function()
{
z <- runif(1,0.1,5)
c(X.0=z)
}
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=50,
pars=c('X.0'),
rw.sd = c(X.0 = .04),
start = consttheta.mif.start(),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
exp(coef(consttheta.mif))
trthetavec[i]
i
consttheta.mif <- mif( consttheta.pomp,
Nmif = 300,
Np=5000,
pars=c('X.0'),
rw.sd = c(X.0 = .01),
start = consttheta.mif.start(),
ic.lag=5,
var.factor=2,
cooling.type='geometric',
cooling.fraction=.95
)
exp(coef(consttheta.mif))
consttheta.mif <- consttheta.mif(consttheta.mif,Nmif=50,cooling.fraction=0.8)
consttheta.mif <- consttheta.mif(consttheta.mif,Nmif=50,cooling.fraction=0.6)
consttheta.mif <- consttheta.mif(consttheta.mif,Nmif=50,cooling.fraction=0.4)
tr.ci
dput(tr.ci)
choose(10,2)
Sys.which("pdflatex")
library(ape)
?rtt
t <- rtree(100)
tip.date <- rnorm(t$tip.label)^2
rtt(t, tip.date)
t <- rtree(100)
tip.date <- rnorm(t$tip.label)^2
t2=rtt(t, tip.date)
t2
distRoot(t2)
library(adephylo)
distRoot(t2)
y <- distRoot(t2)
x <- rep(1,100)
lm(y~x)
library(deSolve)
library(rootSolve)
sir.ode <- function(times,init,parms){
with(as.list(c(parms,init)), {
# ODEs
dS <- -beta*S*I
dI <- beta*S*I-mu*I
dR <- mu*I
list(c(dS,dI,dR))
})
}
parms <- c(beta=0.1,mu=0.05)
init <- c(S=0.99,I=0.01,R=0)
times <- seq(0,200,by=0.01)
sir.out <- lsoda(init,times,sir.ode,parms)
sir.feuler <- list()
sir.feuler[[1]] <- init
y <- init
for(i in 2:length(times)){
dy <- sir.ode(times[i],y,parms)[[1]]
dt <- times[i]-times[i-1]
newy <- y+dt*dy
sir.feuler[[i]] <- newy
y <- newy
}
sir.feuler
library(magrittr)
lapply(sir.feuler,"[",2) %>% unlist
sir.feuler.i <- lapply(sir.feuler,"[",2) %>% unlist %>% unname
plot(sir.feuler.i~times)
sir.out
sir.out[,3]
plot(sir.feuler.i~sir.out[,3])
cor.test(sir.feuler.i,sir.out[,3])
lm(sir.feuler.i~sir.out[,3])
sir.beuler <- list()
sir.beuler[[1]] <- init
y <- init
for(i in 2:length(times)){
dy <- sir.ode(times[i],y,parms)[[1]]
dt <- times[i]-times[i-1]
newy <- y+dt*dy
install.packages("inline")
install.packages("Rcpp")
library(Rcpp)
library(inline)
BeagleInstanceDetails <- function(){
cpp <- '
BeagleInstanceDetails* returnInfo = new BeagleInstanceDetails();
return wrap(returnInfo);
'
funx <- cfunction(signature(),
cpp,
includes=c("#include <libhmsbeagle/beagle.h>"),
Rcpp=TRUE,
cppargs="-I/usr/local/include/libhmsbeagle-1",
libargs="-L/usr/local/lib -lhmsbeagle")
return(funx())
}
returnInfo <- BeagleInstanceDetails()
cpp <- '
BeagleInstanceDetails* returnInfo = new BeagleInstanceDetails();
return wrap(returnInfo);
'
funx <- cfunction(signature(),
cpp,
includes=c("#include <libhmsbeagle/beagle.h>"),
Rcpp=TRUE,
cppargs="-I/usr/local/include/libhmsbeagle-1",
libargs="-L/usr/local/lib -lhmsbeagle")
?cfunction
?cxxfunction
funx <- cxxfunction(signature(),
cpp,
includes=c("#include <libhmsbeagle/beagle.h>"),
plugin="Rcpp",
cppargs="-I/usr/local/include/libhmsbeagle-1",
libargs="-L/usr/local/lib -lhmsbeagle")
Sys.setenv("PKG_CXXFLAGS"="-I/usr/local/include/libhmsbeagle-1")
Sys.setenv("PKG_LIBS"="-L/usr/local/lib -lhmsbeagle")
funx <- cxxfunction(signature(),
cpp,
includes=c("#include <libhmsbeagle/beagle.h>"),
plugin="Rcpp",
cppargs="-I/usr/local/include/libhmsbeagle-1",
libargs="-L/usr/local/lib -lhmsbeagle")
setwd("~/Projects/pangea-round2/training")
library(ape)
datadir <- "150227_PANGEAsim_Regional_Train1"
gag <- read.dna(paste(datadir,"150227_HPTN071_TRAIN1_SIMULATED_gag.fa",sep="/"),as.matrix=TRUE)
gag <- read.dna(paste(datadir,"150227_HPTN071_TRAIN1_SIMULATED_gag.fa",sep="/"),format="fasta",as.matrix=TRUE)
dim(gag)
row.names(gag)
datadir <- "150227_PANGEAsim_Regional_Train1"
gag <- read.dna(paste(datadir,"150227_HPTN071_TRAIN1_SIMULATED_gag.fa",sep="/"),format="fasta",as.matrix=TRUE)
pol <- read.dna(paste(datadir,"150227_HPTN071_TRAIN1_SIMULATED_pol.fa",sep="/"),format="fasta",as.matrix=TRUE)
env <- read.dna(paste(datadir,"150227_HPTN071_TRAIN1_SIMULATED_env.fa",sep="/"),format="fasta",as.matrix=TRUE)
s <- rbind(gag,pol,env)
s <- cbind(gag,pol,env)
dim(s)
s
row.names(gag)==row.names(pol)
row.names(gag)==row.names(env)
write.dna(s,"train.fas",format="fasta",nbcol=-1,colsep="")
s2 <- s
row.names(s)
row.names(s) %>% strsplit(.,"|")
library(magrittr)
row.names(s) %>% strsplit(.,"|")
row.names(s) %>% strsplit(.,"|",fixed=TRUE)
row.names(s) %>% strsplit(.,"|",fixed=TRUE) %>% lapply(.,"[",1)
row.names(s) %>% strsplit(.,"|",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist
s2 <- s
s2.names <- row.names(s) %>% strsplit(.,"|",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist
row.names(s2) <- s2.names
write.dna(s2,"train.fas",format="fasta",nbcol=-1,colsep="")
write.dna(s2,"train.phy",format="interleaved")
cmd <- "/usr/local/bin/parse-examl -s train.phy -m DNA -q regional_partition -n train"
system(cmd)
cmd <- "/usr/local/bin/raxml -y -m GTRCAT -p 12345 -s train.phy -n train_startingtree"
system(cmd)
cmd <- "muscle -profile -in1 subc.fas -in2 train.fas -out subc_train.fas"
system(cmd)
cmd <- "muscle -profile -in1 subc.fasta -in2 train.fas -out subc_train.fas"
system(cmd)
cmd <- "clustalo --p1 subc.fasta --p2 train.fas -o subc_train.fas"
system(cmd)
cmd <- "clustalo --in subc_dealign.fasta --p1 train.fas -o subc_train.fas"
system(cmd)
cmd <- "cat subc_dealign.fasta train.fas > subc_train_dealign.fas"
system(cmd)
cmd <- "clustalo --in subc_train_dealign.fasta -o subc_train_align.fas"
system(cmd)
cmd <- "clustalo --in subc_train_dealign.fas -o subc_train_align.fas"
system(cmd)
blast <- read.table("train_blast.txt",header=F,row.names=NULL)
blast
blast <- read.csv("train_blast.txt",header=F,row.names=NULL)
blast
blast.hits <- unique(paste(blast[,1],blast[,2],sep="|"))
